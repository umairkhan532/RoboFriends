{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","name","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kOA2BeA,EAvBE,SAAC,GAAa,EAAZC,OAEjB,MAAM,IAAIC,MAAM,eCWHC,EAfG,SAAC,GACnB,EADoBC,YACnB,IADgCC,EACjC,EADiCA,aAEhC,OACA,qBAAKC,UAAW,MAAhB,SACC,uBACCA,UAAY,mCACZC,KAAK,SACLC,YAAa,eACbC,SAAYJ,OCGAK,G,MAXA,SAACC,GAEf,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,SAAnE,SACCJ,EAAMK,aC+CMC,E,kDA5Cd,aAAc,IAAD,8BACZ,gBAgBAC,eAAiB,SAACC,GACb,EAAKC,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAhB/C,EAAKC,MAAM,CACVtB,OAAQ,GACRG,YAAa,IAJF,E,qDASb,WAAoB,IAAD,OAClBoB,MAAM,8CACJC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACnB,OAAO2B,S,oBAWvC,WAAS,IAAD,OACDC,EAAiBC,KAAKP,MAAMtB,OAAO8B,QAAO,SAAA9B,GAChD,OAAOA,EAAO+B,KAAKC,cAAcC,SAAS,EAAKX,MAAMnB,YAAY6B,kBAEjE,OAA8B,IAA3BH,KAAKP,MAAMtB,OAAOkC,OACb,2CAIR,sBAAK7B,UAAW,KAAhB,UACC,oBAAIA,UAAU,MAAd,2BACA,cAAC,EAAD,CAAWD,aAAgByB,KAAKZ,iBAChC,cAAC,EAAD,UACA,cAAC,EAAD,CAAUjB,OAAS4B,a,GArCJO,aCRZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTnB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfsB,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,MCrDjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDGlC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,eAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,eAAN,sBAEP1B,EAwCV,SAAiCO,GAE/BpB,MAAMoB,GACHnB,MAAK,SAAAC,GAGkB,MAApBA,EAASwC,SACuD,IAAhExC,EAASyC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM7C,MAAK,SAAAuB,GACjCA,EAAauB,aAAa9C,MAAK,WAC7Bc,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEA5DAkB,CAAwB7B,GAGxBD,EAAgBC,OCrBxB8B,K","file":"static/js/main.5c8fb32a.chunk.js","sourcesContent":["import React from 'react'; \r\nimport Card from './Card'; \r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\tif(true){\r\n\t\tthrow new Error('NO boieoeo');\r\n\t}\r\nreturn(\r\n\t<div> \r\n   {\r\n\t    robots.map((user,i)=> {\r\n\treturn (<Card \r\n\t\t\tkey = {i }\r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email} \r\n\t\t\t/>\r\n\t\t\t);\r\n\t\t})\r\n\t   }\r\n</div> \r\n\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react'; \r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>\r\n{\r\n\treturn (\r\n\t<div className ='pa2'> \r\n\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder ='searchrobots' \r\n\t\t\tonChange = {searchChange}\r\n\t\t/>\r\n\t</div> \r\n\t\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react'; \r\n\r\nconst Scroll = (props) => \r\n{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border:'5px solid black', height:'800px'}}> \r\n\t\t{props.children}\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n};\r\n\r\nexport default Scroll; ","import React, {Component} from 'react'; \r\nimport CardList\tfrom '../components/CardList'; \r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'; \r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users') \r\n\t\t\t.then(response => {return response.json()})\r\n\t\t\t.then(users => this.setState({robots:users}));\r\n\t\t\r\n\t}\r\n\r\n\r\n\t onSearchChange = (event) => {\r\n    \t\t\tthis.setState({ searchfield: event.target.value })\r\n  \t\t}\r\n  \r\n\r\n\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robots=>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t})\r\n\t\tif(this.state.robots.length===0){\r\n\t\t\treturn <h1> Loading </h1>\r\n\t\t}\r\n\t\telse {\r\n\t\treturn (\r\n\t\t<div className= 'tc'>\r\n\t\t\t<h1 className='f1 '> RoboFriends </h1> \r\n\t\t\t<SearchBox searchChange = {this.onSearchChange}/> \r\n\t\t\t<Scroll> \r\n\t\t\t<CardList robots ={filteredRobots}/>\r\n\t\t\t</Scroll> \r\n\t\t\t\t</div> \r\n\t\t);\r\n\t}\r\n\r\n\t} \r\n}\r\nexport default App; ","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons'; \n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}